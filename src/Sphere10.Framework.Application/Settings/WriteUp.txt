The Settings API should be a simple, powerful and cross-platform solution that stores settings



Simple use of settings

First declare your settings



	public class DatabaseSettings : SettingsObject {

		[DefaultValue(AppSetting("DatabaseServer"))]
		[DefaultValue("localhost")]						
		public string Server { get; set; }

		[AppSetting("DatabaseName")]
		public string DatabseName { get; set; }

	}

	public class ScreenSetting : SettingsObject {

		[RectangleF(AutoSize)]
		public RectangleF Frame { get; set;

	}

	...

	var settings = new DatabaseSettings();	
	// you can now use your settings 

	public class MyScreen {

	   ctor {

			SetWindow = UserSettings.Get<ScreenSetting>("MyScreen");
	   }
	}

A little more complex

	public class DatabaseSettings : SettingsObject {

		[AppSetting("DatabaseServer")]
		[DefaultValue("localhost")]						
		public string Server { get; set; }

		[AppSetting("DatabaseName")]
		public string DatabseName { get; set; }

	}

	...

	var settings = GlobalSettings.Get<DatabaseSettings>();
	// change settings here
	settings.Save();

	or

	var settings = UserSettings.Get<DatabaseSettings>();
	// change settings here
	settings.Save();


	for iPhone & OS X you can also use

	var settings = NSUserDefaultsEx.Get<DatabaseSettings>();	
	settings.Save();



Changing the global & settings provider 

    // in your main method 

	UserSettings.SetProvider<NSUserDefaultsSettingsProvider>()
	GlobalSettings.SetProvider<NSUserDefaultsSettingsProvider>()


Implementing your own settings provider

	public class SettingsProvider: ISettingsProvider {


		




	var settings = new DatabaseSettings();

	settin
	


Encryption

Some settings need to be stored in a safe way that the user (or malware) cannot steal

	public class MyAppSettings : SettingsObject {

		[Default("1234-5678")]		// this can be your trial key
		[Encrypted(Policy = SettingEncryptionPolicy.MACAddress, Salt = "j23b23"]					// this will be stored encrypted
		public string ProductKey { get; set; }
	}

	The default encryption uses a reversable encryption algorithm, but you can change it with your own
	
	GlobalSettings.SetEncryptionProvider(new MyEncryptionProvider());


	Example MyEncryptionProvider

	public class MyEncryptionProvider : ISettingsCipher {
		// .. this can use oth
	}
